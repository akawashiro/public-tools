" The structure of this init.vim is following
" 1. dein Scripts
" 2. setting for vim itself
" 3. setting for standalone plugins
" 4. setting for programming languages
"
"dein Scripts-----------------------------

if &compatible
    set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=$HOME/.cache/dein/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state($HOME . '/.cache/dein')
    call dein#begin($HOME . '/.cache/dein')

    " Let dein manage dein
    " Required:
    call dein#add($HOME . '/.cache/dein/repos/github.com/Shougo/dein.vim')

    " Add or remove your plugins here like this:
    call dein#add('Shougo/deoplete.nvim')
    call dein#add('vim-airline/vim-airline')
    call dein#add('vim-airline/vim-airline-themes')
    call dein#add('scrooloose/nerdtree')
    call dein#add('zchee/deoplete-jedi')
    call dein#add('deoplete-plugins/deoplete-clang')
    call dein#add('davidhalter/jedi-vim', {"autoload": { "filetypes": [ "python", "python3", "djangohtml"] }})
    call dein#add('dag/vim2hs')
    call dein#add('tyru/caw.vim.git')
    call dein#add('Shougo/neosnippet')
    call dein#add('Shougo/neosnippet-snippets')
    call dein#add('Shougo/neco-syntax')
    call dein#add("vim-scripts/vim-auto-save")
    call dein#add('vim-syntastic/syntastic')
    call dein#add('tell-k/vim-autopep8')
    call dein#add('tpope/vim-fugitive')
    call dein#add('ervandew/supertab')
    call dein#add('autozimu/LanguageClient-neovim', { 'rev': 'next', 'build': 'bash install.sh',})
    call dein#add('dhruvasagar/vim-table-mode') 
    call dein#add('rust-lang/rust.vim')
    call dein#add('racer-rust/vim-racer')
    if !has('nvim')
        call dein#add('roxma/nvim-yarp')
        call dein#add('roxma/vim-hug-neovim-rpc')
        call dein#add('fatih/vim-go')
    endif

    " Required:
    call dein#end()
    call dein#save_state()
endif
" If you want to install not installed plugins on startup.
if dein#check_install()
    call dein#install()
endif
"End dein Scripts-------------------------

" nvim

" Use newer python installed in home directory.
let g:python3_host_prog = substitute(system('which python3'),"\n","","")

filetype plugin indent on
syntax enable
set number
set shiftwidth=4
set tabstop=4
set expandtab
set cindent
syntax on

set nocompatible
set whichwrap=b,s,h,l,<,>,[,],~
set backspace=indent,eol,start

set clipboard+=unnamedplus
set hlsearch
nmap <Esc><Esc> :nohlsearch<CR><Esc>
inoremap jj <Esc>

set guifont =DejaVu\ Sans\ Mono\ 10 
" set guifontwide =VL\ „Ç¥„Ç∑„ÉÉ„ÇØ\ 10
set nofoldenable    " disable folding

" Ë°å„ÇíÂº∑Ë™øË°®Á§∫
set cursorline
" Âàó„ÇíÂº∑Ë™øË°®Á§∫
" set cursorcolumn

" buffer
map <silent> tn :bnext<CR>
map <silent> tp :bprevious<CR>
map <silent> td :bdelete<CR>

" nerdtree
nnoremap <silent><C-e> :NERDTreeToggle<CR>

" caw comment out 
nmap <C-c> <Plug>(caw:hatpos:toggle)
vmap <C-c> <Plug>(caw:hatpos:toggle)

" vim-auto-save
let g:auto_save = 1
let g:auto_save_in_insert_mode = 0

" deoplete-clang
let g:deoplete#sources#clang#libclang_path = '/usr/lib/x86_64-linux-gnu/libclang-10.so.1'

" syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = {
    \ "mode": "active",
    \ "passive_filetypes": ["tex"] }

hi SyntasticErrorSign ctermfg=160
hi SyntasticWarningSign ctermfg=220

" vim-syntastic/syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" vim-fugitive
command -nargs=1 Gac Gwrite | Gcommit -m <args>
command -nargs=1 Gpo Git push origin <args>

" start airline --------------------------------------------------------

" PowerlineÁ≥ª„Éï„Ç©„É≥„Éà„ÇíÂà©Áî®„Åô„Çã
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline_theme = 'tomorrow'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '¬ª'
let g:airline_left_sep = '‚ñ∂'
let g:airline_right_sep = '¬´'
let g:airline_right_sep = '‚óÄ'
let g:airline_symbols.crypt = 'üîí'
let g:airline_symbols.linenr = '‚ò∞'
let g:airline_symbols.linenr = '‚êä'
let g:airline_symbols.linenr = '‚ê§'
let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.maxlinenr = '„èë'
let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.paste = 'œÅ'
let g:airline_symbols.paste = '√û'
let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.spell = 'Íû®'
let g:airline_symbols.notexists = '‚àÑ'
let g:airline_symbols.whitespace = 'Œû'

" powerline symbols
let g:airline_left_sep = 'ÓÇ∞'
let g:airline_left_alt_sep = 'ÓÇ±'
let g:airline_right_sep = 'ÓÇ≤'
let g:airline_right_alt_sep = 'ÓÇ≥'
let g:airline_symbols.branch = 'ÓÇ†'
let g:airline_symbols.readonly = 'ÓÇ¢'
let g:airline_symbols.linenr = '‚ò∞'
let g:airline_symbols.maxlinenr = 'ÓÇ°'

" end airline --------------------------------------------------------

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" " Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


" start deoplete --------------------------------------------------------
let g:deoplete#enable_at_startup = 1
" let g:deoplete#force_omni_input_patterns = get(g:, 'deoplete#force_omni_input_patterns', {})
" let g:deoplete#force_omni_input_patterns.javascript = '[^. \t]\.\w*'

inoremap <expr><tab> pumvisible() ? "\<C-n>" :
            \ neosnippet#expandable_or_jumpable() ?
            \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
" end deoplete --------------------------------------------------------

" start neosnippet --------------------------------------------------------
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
           \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
    set conceallevel=2 concealcursor=niv
endif
" end   neosnippet --------------------------------------------------------

" Start TeX ==========================================================
let g:tex_conceal = ""
" End Tex ==========================================================

" Start Python ==========================================================
let g:pymode_python = 'python3'

" syntastic checker python
let g:syntastic_python_checkers = ['flake8']

" End   Python ==========================================================

" Start OCaml ==========================================================
let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
execute "set rtp+=" . g:opamshare . "/merlin/vim"
set rtp^="/home/akira/.opam/default/share/ocp-indent/vim"
" End OCaml ==========================================================

" Start Haskell ==========================================================

set rtp+=~/.cache/dein/repos/github.com/autozimu/LanguageClient-neovim_next
let g:LanguageClient_serverCommands = { 
    \ 'go': ['gopls'],
    \ 'haskell': ['hie-wrapper'] }
nnoremap <F5> :call LanguageClient_contextMenu()<CR>
map <Leader>lk :call LanguageClient#textDocument_hover()<CR>
map <Leader>lg :call LanguageClient#textDocument_definition()<CR>
map <Leader>lr :call LanguageClient#textDocument_rename()<CR>
map <Leader>lf :call LanguageClient#textDocument_formatting()<CR>
map <Leader>lb :call LanguageClient#textDocument_references()<CR>
map <Leader>la :call LanguageClient#textDocument_codeAction()<CR>
map <Leader>ls :call LanguageClient#textDocument_documentSymbol()<CR>

" End   Haskell ==========================================================
