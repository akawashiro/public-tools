# [[plugins]]
# repo = 'skywind3000/asyncrun.vim'
# hook_add = '''
#     noremap <Leader>at :AsyncRun ./test.sh<CR>
# '''
#
# [[plugins]]
# repo = 'neovim/nvim-lspconfig'
# 
# [[plugins]]
# repo = 'JuliaEditorSupport/julia-vim'

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'mechatroner/rainbow_csv'

[[plugins]]
repo = 'chrisbra/Colorizer'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = [ 'junegunn/fzf' ]
hook_add = '''
    let $FZF_DEFAULT_OPTS="--layout=reverse"
    let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.9, 'height': 0.9,'yoffset':0.5,'xoffset': 0.75, 'border': 'sharp' } }

    command! -bang -nargs=* GCGrep call fzf#vim#grep('git grep --line-number -- '.shellescape(expand(<q-args>)), 0, fzf#vim#with_preview({'options': ['--query', expand('<cword>')], 'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

    noremap <Leader>ff :Files<CR>
    noremap <Leader>fgf :GFiles<CR>
    noremap <Leader>fgg :GGrep<CR>
    noremap <Leader>fgc :GCGrep<CR>
    noremap <Leader>fa :Ag<CR>
    noremap <Leader>fb :Buffers<CR>
'''

[[plugins]]
repo = 'antoinemadec/coc-fzf'
depends = [ 'neoclide/coc.nvim' ]
hook_add = '''
    let g:coc_fzf_opts = ['--layout=reverse']
    let g:coc_fzf_preview = 'right:50%'
    noremap <Leader>fs :CocFzfList symbols<CR>
'''

[[plugins]]
repo = 'pboettch/vim-cmake-syntax'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    let NERDTreeShowHidden = 1
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
    noremap <Leader>nt :NERDTreeTabsToggle<CR>
    noremap <Leader>nf :NERDTreeFind<CR>
'''
depends = ['nerdtree']

[[plugins]]
repo = 'preservim/tagbar'
hook_add = '''
    nmap <C-t> :TagbarToggle<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'tyru/caw.vim.git'
hook_add = '''
    nmap <C-c> <Plug>(caw:hatpos:toggle)
    vmap <C-c> <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

[[plugins]]
repo = 'Shougo/deoplete.nvim'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    " Use powerline-style font
    set laststatus=2
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#whitespace#mixed_indent_algo = 1
    let g:airline_theme = 'tomorrow'
    if !exists('g:airline_symbols')
      let g:airline_symbols = {}
    endif
    
    " unicode symbols
    let g:airline_left_sep = '¬ª'
    let g:airline_left_sep = '‚ñ∂'
    let g:airline_right_sep = '¬´'
    let g:airline_right_sep = '‚óÄ'
    let g:airline_symbols.crypt = 'üîí'
    let g:airline_symbols.linenr = '‚ò∞'
    let g:airline_symbols.linenr = '‚êä'
    let g:airline_symbols.linenr = '‚ê§'
    let g:airline_symbols.linenr = '¬∂'
    let g:airline_symbols.maxlinenr = ''
    let g:airline_symbols.maxlinenr = '„èë'
    let g:airline_symbols.branch = '‚éá'
    let g:airline_symbols.paste = 'œÅ'
    let g:airline_symbols.paste = '√û'
    let g:airline_symbols.paste = '‚à•'
    let g:airline_symbols.spell = 'Íû®'
    let g:airline_symbols.notexists = '‚àÑ'
    let g:airline_symbols.whitespace = 'Œû'
    
    " powerline symbols
    let g:airline_left_sep = 'ÓÇ∞'
    let g:airline_left_alt_sep = 'ÓÇ±'
    let g:airline_right_sep = 'ÓÇ≤'
    let g:airline_right_alt_sep = 'ÓÇ≥'
    let g:airline_symbols.branch = 'ÓÇ†'
    let g:airline_symbols.readonly = 'ÓÇ¢'
    let g:airline_symbols.linenr = '‚ò∞'
    let g:airline_symbols.maxlinenr = 'ÓÇ°'
'''

[[plugins]]
repo = 'rust-lang/rust.vim'

# ========== start cpp ==========

# Jump to the corresponding header or source file
[[plugins]]
repo = 'vim-scripts/a.vim'
on_ft = ['c', 'cpp']
hook_source = '''
    nmap <silent> <leader>aa :A<CR>
'''

# ========== end cpp ==========

# ========== start coc ==========

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
hook_add = '''
" default install
let g:coc_global_extensions = [
    \'coc-clangd',
    \'coc-rust-analyzer',
    \'coc-pyright',
    \]

" Color of Error and Warning
highlight CocErrorSign ctermfg=15 ctermbg=196
highlight CocWarningSign ctermfg=0 ctermbg=172

" Jump to the definition with \-d
nnoremap <silent> <Leader>d :call CocAction('jumpDefinition')<CR>
" Run format with \-fmt
nnoremap <silent> <Leader>fmt :call CocAction('format')<CR>
" Coc-quick-fix
nnoremap <silent> <Leader>fx :call CocAction('doQuickfix')<CR>
'''

# ========== end coc ==========
